{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ZenScript",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#doublestrings"
    },
    {
      "include": "#singlestrings"
    },
    {
      "include": "#values"
    },
    {
      "include": "#brackethandlers"
    },
    {
      "include": "#blockcomment"
    },
    {
      "include": "#linecomment"
    },
    {
      "include": "#preprocessor"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.zenscript",
          "match": "\\b(any|bool|byte|short|int|long|float|double|string|function|in|has|void|as|version|return|var|val|global|static|instanceof|break|null|true|false)\\b"
        },
        {
          "name": "keyword.control.import.zenscript",
          "match": "\\bimport\\b"
        },
        {
          "name": "keyword.control.conditional.zenscript",
          "match": "\\b(if|else)\\b"
        },
        {
          "name": "keyword.control.loop.zenscript",
          "match": "\\b(for|while)\\b"
        },
        {
          "name": "keyword.operator",
          "match": "(\\.\\.|\\+=|\\+|-=|-|\\*=|\\*|\\/=|\\/|%=|%|\\|=|\\||\\|\\||&=|&&|&|\\^=|\\^|\\?|:|~=|~|;|<=|<|>=|>|==|=|!=|!|\\$)"
        }
      ]
    },
    "doublestrings": {
      "name": "string.quoted.double.zenscript",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.unicode.zenscript",
          "match": "\\\\u[0-9A-F]{4}"
        },
        {
          "name": "constant.character.escape.zenscript",
          "match": "\\\\."
        }
      ]
    },
    "singlestrings": {
      "name": "string.quoted.single.zenscript",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.unicode.zenscript",
          "match": "\\\\u[0-9A-F]{4}"
        },
        {
          "name": "constant.character.escape.zenscript",
          "match": "\\\\."
        }
      ]
    },
    "values": {
      "patterns": [
        {
          "name": "constant.numeric.integer.zenscript",
          "match": "(?:0x[A-Fa-f0-9]*)|(?:-?(0|[1-9][0-9]*))"
        },
        {
          "name": "constant.numeric.float.zenscript",
          "match": "-?(0|[1-9][0-9]*).[0-9]+([eE][+-]?[0-9]+)?[fFdD]?"
        }
      ]
    },
    "brackethandlers": {
      "name": "variable.language.brackethandler.zenscript",
      "begin": "<",
      "end": ">",
      "patterns": [
        {
          "name": "variable.parameter.brackethandler.zenscript",
          "match": "(?<=\\<)(.*?)(?=\\:)"
        }
      ]
    },
    "blockcomment": {
      "name": "comment.blockcomment.zenscript",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "linecomment": {
      "name": "comment.linecomment.zenscript",
      "begin": "//",
      "end": "\\n"
    },
    "preprocessor": {
      "name": "keyword.control.preprocessor",
      "begin": "#",
      "end": "\\n"
    }
  },
  "scopeName": "source.zenscript"
}
